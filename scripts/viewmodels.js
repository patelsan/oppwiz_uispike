// Generated by CoffeeScript 1.6.3
(function() {
  var NavigationViewModel, Opportunity, OpportunityViewModel, namespace,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  namespace = function(target, name, block) {
    var item, top, _i, _len, _ref, _ref1;
    if (arguments.length < 3) {
      _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
    }
    top = target;
    _ref1 = name.split('.');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      if (item.length > 0) {
        target = target[item] || (target[item] = {});
      } else {
        target = window;
      }
    }
    return block(target, top);
  };

  NavigationViewModel = (function() {
    function NavigationViewModel() {
      this.filterFields = __bind(this.filterFields, this);
      this.defineField = __bind(this.defineField, this);
      this.createFieldMap = __bind(this.createFieldMap, this);
      var _this = this;
      this.opportunity = new Models.Opportunity();
      this.fieldMap = ko.observableArray();
      this.fieldSearchText = ko.observable();
      this.createFieldMap();
      this.fieldSearchText.subscribe(function(newVal) {
        return _this.filterFields(newVal);
      });
    }

    NavigationViewModel.prototype.createFieldMap = function() {
      this.fieldMap.push({
        InfoGroup: 'Summary',
        GroupID: 'summary',
        Fields: ko.observableArray([this.defineField('Opportunity Name', 'opportunityname'), this.defineField('Opportunity Status', 'opportunitystatus'), this.defineField('Transaction Type', 'transactiontype'), this.defineField('Transaction Sub Type', 'transactionsubtype'), this.defineField('Close Probability', 'closeprobability'), this.defineField('Security level', 'securitylevel'), this.defineField('Client', 'client'), this.defineField('Client Type', 'clienttype'), this.defineField('Investor Type', 'investortype')])
      });
      this.fieldMap.push({
        InfoGroup: 'Properties',
        GroupID: 'properties',
        Fields: ko.observableArray([this.defineField('Property Location Market', 'propertylocationmarket'), this.defineField('Low Property Value', 'lowpropertyvalue'), this.defineField('High Property Value', 'highpropertyvalue'), this.defineField('Capital Raised', 'capitalraised')])
      });
      this.fieldMap.push({
        InfoGroup: 'Key Dates',
        GroupID: 'keydates',
        Fields: ko.observableArray([this.defineField('Start Date', 'startdate'), this.defineField('Pitch Proposal Date', 'pitchproposaldate'), this.defineField('Listing Expiration Date', 'listingexpirationdate')])
      });
      this.fieldMap.push({
        InfoGroup: 'Commission',
        GroupID: 'commission',
        Fields: ko.observableArray([this.defineField('Total Commission', 'totalcommission'), this.defineField('Fee Percentage', 'feepercentage')])
      });
      this.fieldMap.push({
        InfoGroup: 'Key Contacts',
        GroupID: 'keycontacts',
        Fields: ko.observableArray([this.defineField('Primary Client Contact', 'primaryclientcontact'), this.defineField('Bill To Contact', 'billtocontact'), this.defineField('Generating Market', 'generatingmarket'), this.defineField('Deal Market', 'dealmarket')])
      });
      this.fieldMap.push({
        InfoGroup: 'Competitors',
        GroupID: 'competitors',
        Fields: ko.observableArray([this.defineField('Primary1', 'primary1')])
      });
      this.fieldMap.push({
        InfoGroup: 'Deal costs',
        GroupID: 'dealcosts',
        Fields: ko.observableArray([this.defineField('Primary2', 'primary2')])
      });
      return this.fieldMap.push({
        InfoGroup: 'Documents',
        GroupID: 'documents',
        Fields: ko.observableArray([this.defineField('Primary3', 'primary3')])
      });
    };

    NavigationViewModel.prototype.defineField = function(name, id) {
      return {
        Name: name,
        ID: id,
        Display: ko.observable(true)
      };
    };

    NavigationViewModel.prototype.filterFields = function(searchTerm) {
      if (searchTerm == null) {
        return;
      }
      searchTerm = searchTerm.toLowerCase();
      return this.fieldMap().forEach(function(section) {
        return section.Fields().forEach(function(field) {
          if (field.Name.toLowerCase().indexOf(searchTerm) === -1) {
            return field.Display(false);
          } else {
            return field.Display(true);
          }
        });
      });
    };

    return NavigationViewModel;

  })();

  namespace('Models', function(exports) {
    return exports.NavigationViewModel = NavigationViewModel;
  });

  Opportunity = (function() {
    function Opportunity() {
      this.isSupplied = __bind(this.isSupplied, this);
      this.isRequired = __bind(this.isRequired, this);
      this.OpportunityName = ko.observable();
      this.TransactionType = ko.observable();
      this.Commission = ko.observable();
      this.StartDate = ko.observable();
      this.AwardDate = ko.observable();
    }

    Opportunity.prototype.isRequired = function(fieldId) {
      var _this = this;
      return ko.computed(function() {
        return Boolean(fieldId.length % 2);
      });
    };

    Opportunity.prototype.isSupplied = function(fieldId) {
      var _this = this;
      return ko.computed(function() {
        return Boolean(fieldId.length % 2);
      });
    };

    return Opportunity;

  })();

  namespace('Models', function(exports) {
    return exports.Opportunity = Opportunity;
  });

  OpportunityViewModel = (function() {
    function OpportunityViewModel() {
      this.data = new Models.Opportunity();
    }

    return OpportunityViewModel;

  })();

  namespace('Models', function(exports) {
    return exports.OpportunityViewModel = OpportunityViewModel;
  });

}).call(this);
